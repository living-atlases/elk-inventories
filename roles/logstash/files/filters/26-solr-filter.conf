filter {
  if [log_type] == "solr" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:@timestamp}\s+%{WORD:[log][level]}\s+\(%{DATA:[log][thread]}\)\s+\[(\s*%{DATA:[log][solr][node_shard]})?\]\s+%{DATA:[log][solr][class]}\s+(\[%{DATA:[log][solr][shard]}\]\s+)?%{GREEDYDATA:[log][solr][body_str]}"}
    }
    grok {
      match => { "[log][solr][node_shard]" => "c:%{DATA:[log][solr][collection]}\s+s:%{DATA:[log][solr][replica][shard]}\s+r:%{DATA:[log][solr][replica][node]}\s+x:%{GREEDYDATA:[log][solr][replica][core]}"}
    }
    grok {
      match => { "[log][solr][body_str]" => "%{DATA:[log][solr][body][kv1]}( params=\{%{DATA:[log][solr][query_params]}\})(\{%{DATA:[log][solr][body][batch]}\})?( %{NUMBER:[log][solr][body][n0]})?( %{NUMBER:[log][solr][body][n1]})?\s*%{GREEDYDATA:[log][solr][body][kv2]}"}
    }
    if [log][solr][body][kv1] and [log][solr][body][kv2] {
      mutate {
        add_field => {
          "[log][solr][body][kv]" => "%{[log][solr][body][kv1]} %{[log][solr][body][kv2]}"
        }
        remove_field => ["[log][solr][body][kv1]", "[log][solr][body][kv2]"]
      }
    } 
    else if [log][solr][body][kv1] {
      mutate {
        add_field => {
          "[log][solr][body][kv]" => "%{[log][solr][body][kv1]}"
        }
        remove_field => ["[log][solr][body][kv1]"]
      }
    } 
    else if [log][solr][body][kv2] {
      mutate {
        add_field => {
          "[log][solr][body][kv]" => "%{[log][solr][body][kv2]}"
        }
        remove_field => ["[log][solr][body][kv2]"]
      }
    } 
    kv {
      source => "[log][solr][body][kv]"
      target => "[log][solr][query]"
      exclude_keys => [ "ids" ]
      timeout_millis => 5000
      tag_on_timeout => "kv_parse_timeout"
      tag_on_failure => "kv_parse_failure"
      allow_duplicate_values => false
    }
    kv {
      source => "[log][solr][query_params]"
      target => "[log][solr][query][parameters]"
      field_split => "&"
      exclude_keys => [ "ids" ]
      timeout_millis => 5000
      tag_on_timeout => "kv_parse_timeout"
      tag_on_failure => "kv_parse_failure"
      allow_duplicate_values => false
    }
    mutate {
      rename => { "[log][solr][query][parameters][facet]"       => "[log][solr][query][parameters][facet_param]" }
      rename => { "[log][solr][query][parameters][q]"           => "[log][solr][query][parameters][q_param]" }
      rename => { "[log][solr][query][parameters][group]"       => "[log][solr][query][parameters][group_param]" }
      rename => { "[log][solr][query][parameters][facet.range]" => "[log][solr][query][parameters][facet][range_param]" }
      rename => { "[log][solr][query][parameters][facet.pivot]" => "[log][solr][query][parameters][facet][pivot_param]" }
      rename => { "[log][solr][query][parameters][hl]"          => "[log][solr][query][parameters][facet][hl_param]" }
      rename => { "[log][solr][query][parameters][distrib]"     => "[log][solr][query][parameters][distrib_param]" }
      rename => { "[log][solr][query][parameters][shard]"       => "[log][solr][query][parameters][shard_param]" }
      rename => { "[log][solr][query][parameters][stats]"       => "[log][solr][query][parameters][stats_param]" }
      remove_field => ["[log][solr][body_str]", "[log][solr][query_params]", "[log][solr][body][kv]", "[log][solr][node_shard]"]
    }
  }  
}


