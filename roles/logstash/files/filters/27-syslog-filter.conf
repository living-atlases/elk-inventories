filter {
  if [log_type] == "syslog" {
    if [syslog][type] == "auth" {
      grok {
        match => { "message" => ["%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{DATA:[system][auth][ssh][method]} for (invalid user )?%{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]} ssh2(: %{GREEDYDATA:[system][auth][ssh][signature]})?",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} user %{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: Did not receive identification string from %{IPORHOST:[system][auth][ssh][ip]}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: ?(fatal: )?%{DATA:[system][auth][ssh][event]} with %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]}: no matching key exchange method found. Their offer: %{NOTSPACE:[system][auth][ssh][client_key_exchange_methods]} \[preauth\]",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: ?(fatal: )?%{DATA:[system][auth][ssh][event]}: client %{NOTSPACE:[system][auth][ssh][client_mac_methods]} server %{NOTSPACE:[system][auth][ssh][server_mac_methods]} \[preauth\]",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} ?(user %{NOTSPACE:[system][auth][user]} )?%{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]} \[preauth\]",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]}:11: Normal Shutdown, Thank you for playing \[preauth\]",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]} on %{IPORHOST:[system][auth][ssh][server_ip]} port %{NUMBER:[system][auth][ssh][server_port]}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sudo(?:\[%{POSINT:[system][auth][pid]}\])?: \s*%{DATA:[system][auth][user]} :( %{DATA:[system][auth][sudo][error]} ;)? TTY=%{DATA:[system][auth][sudo][tty]} ; PWD=%{DATA:[system][auth][sudo][pwd]} ; USER=%{DATA:[system][auth][sudo][user]} ; COMMAND=%{GREEDYDATA:[system][auth][sudo][command]}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} groupadd(?:\[%{POSINT:[system][auth][pid]}\])?: new group: name=%{DATA:system.auth.groupadd.name}, GID=%{NUMBER:system.auth.groupadd.gid}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} useradd(?:\[%{POSINT:[system][auth][pid]}\])?: new user: name=%{DATA:[system][auth][user][add][name]}, UID=%{NUMBER:[system][auth][user][add][uid]}, GID=%{NUMBER:[system][auth][user][add][gid]}, home=%{DATA:[system][auth][user][add][home]}, shell=%{DATA:[system][auth][user][add][shell]}$",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} %{DATA:[system][auth][program]}(?:\[%{POSINT:[system][auth][pid]}\])?: %{GREEDYMULTILINE:[system][auth][message]}"] }
        pattern_definitions => {
          "GREEDYMULTILINE"=> "(.|\n)*"
        }
      }
      date {
        match => [ "[system][auth][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
      geoip {
        default_database_type => 'City'
        database => '/usr/share/GeoIP/GeoLite2-City.mmdb'
        cache_size => 5000
        source => "[system][auth][ssh][ip]"
        target => "[system][auth][ssh][geoip]"
      }
      geoip {
        default_database_type => 'ASN'
        database => '/usr/share/GeoIP/GeoLite2-ASN.mmdb'
        cache_size => 5000
        source => "[system][auth][ssh][ip]"
        target => "[system][auth][ssh][geoasn]"
      }
    }
    else if [syslog][type] == "syslog" {
      grok {
        match => { "message" => ["%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{SYSLOGHOST:[system][syslog][hostname]} %{DATA:[system][syslog][program]}(?:\[%{POSINT:[system][syslog][pid]}\])?: %{GREEDYMULTILINE:[system][syslog][message]}"] }
        pattern_definitions => { "GREEDYMULTILINE" => "(.|\n)*" }
        remove_field => "message"
      }
      date {
        match => [ "[system][syslog][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
    }
    else if [syslog][type] == "fail2ban" {
      grok {
        match => { "message" => [
                                 "%{TIMESTAMP_ISO8601:[system][syslog][timestamp]} %{DATA:[system][syslog][f2b][component]}\s+(?:\[%{POSINT:[system][syslog][f2b][pid]}\])?: %{WORD:[system][syslog][f2b][log_level]}\s+(?:\[%{DATA:[system][syslog][f2b][jail]}\])?\s+(%{DATA:[system][syslog][f2b][action]})?\s+%{IP:[system][syslog][f2b][source][ip]}",
                                 "%{TIMESTAMP_ISO8601:[system][syslog][timestamp]} %{DATA:[system][syslog][f2b][component]}\s+(?:\[%{POSINT:[system][syslog][f2b][pid]}\])?: %{WORD:[system][syslog][f2b][log_level]}\s+(?:\[%{DATA:[system][syslog][f2b][jail]}\])?\s+%{IP:[system][syslog][f2b][source][ip]} %{GREEDYDATA:[system][syslog][f2b][action]}",
                                 "%{TIMESTAMP_ISO8601:[system][syslog][timestamp]} %{DATA:[system][syslog][f2b][component]}\s+(?:\[%{POSINT:[system][syslog][f2b][pid]}\])?: %{WORD:[system][syslog][f2b][log_level]}\s+%{GREEDYDATA:[system][syslog][f2b][f2b_message]}"
                                ]
        }
        remove_field => "message"
      }
      geoip {
        default_database_type => 'City'
        database => '/usr/share/GeoIP/GeoLite2-City.mmdb'
        cache_size => 5000
        source => "[system][syslog][f2b][source][ip]"
        target => "[system][syslog][f2b][source][geoip]"
      }
      geoip {
        default_database_type => 'ASN'
        database => '/usr/share/GeoIP/GeoLite2-ASN.mmdb'
        cache_size => 5000
        source => "[system][syslog][f2b][source][ip]"
        target => "[system][syslog][f2b][source][geoasn]"
      }
    }
    else if [syslog][type] == "mail" {
      grok {
        match => { "message" => ["%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{SYSLOGHOST:[system][syslog][hostname]} %{DATA:[system][syslog][program]}(?:\[%{POSINT:[system][syslog][pid]}\])?: %{GREEDYMULTILINE:[system][syslog][message]}"] }
        pattern_definitions => { "GREEDYMULTILINE" => "(.|\n)*" }
        remove_field => "message"
      }
      date {
        match => [ "[system][syslog][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
    }
    mutate {
      add_field => { "read_timestamp" => "%{@timestamp}" }
   }
  }
}
