input {
   file {
       type => "ufw"
       start_position => "beginning"
       path => "/var/log/ufw.log"
       }       
   }
filter {
    if [log_type] == "ufw" {
      grok {
        match => ["message", [
                                "^%{SYSLOGTIMESTAMP: timestamp} %{NOTSPACE:[ufw][host]} kernel: \[\s*%{NUMBER:[ufw][kernel_timestamp]}\] \[UFW %{NOTSPACE:[ufw][action]}?( %{NOTSPACE:[ufw][validity]})?\] IN=?(%{NOTSPACE:[ufw][adapter_in]})? OUT=?(%{NOTSPACE:[ufw][adapter_out]})? (MAC=(%{MAC:[ufw][dst_mac]}:%{MAC:[ufw][src_mac]}:%{BASE16NUM:[ufw][mac_appendix_one]}:%{BASE16NUM:[ufw][mac_appendix_two]})? )?SRC=%{IP:[ufw][src_ip]} DST=%{IP:[ufw][dst_ip]} LEN=%{NUMBER:[ufw][packet_len]} TOS=%{BASE16NUM:[ufw][packet_tos]} PREC=%{BASE16NUM:[ufw][packet_prec]} TTL=%{NUMBER:[ufw][packet_ttl]} ID=%{NUMBER:[ufw][packet_id]} (%{GREEDYDATA:[ufw][packet_df]} )?PROTO=%{NOTSPACE:[ufw][packet_proto]} SPT=%{NUMBER:[ufw][packet_src_port]} DPT=%{NUMBER:[ufw][packet_dst_port]} WINDOW=%{NUMBER:[ufw][packet_window]} RES=%{BASE16NUM:[ufw][packet_res]} %{GREEDYDATA:[ufw][packet_flags]} URGP=%{NUMBER:[ufw][packet_urgp]}",
                                "^%{SYSLOGTIMESTAMP: timestamp} %{NOTSPACE:[ufw][host]} kernel: \[\s*%{NUMBER:[ufw][kernel_timestamp]}\] \[UFW %{NOTSPACE:[ufw][action]}?( %{NOTSPACE:[ufw][validity]})?\] IN=?(%{NOTSPACE:[ufw][adapter_in]})? OUT=?(%{NOTSPACE:[ufw][adapter_out]})? (MAC=(%{MAC:[ufw][dst_mac]}:%{MAC:[ufw][src_mac]}:%{BASE16NUM:[ufw][mac_appendix_one]}:%{BASE16NUM:[ufw][mac_appendix_two]})? )?SRC=%{IP:[ufw][src_ip]} DST=%{IP:[ufw][dst_ip]} LEN=%{NUMBER:[ufw][packet_len]} TOS=%{BASE16NUM:[ufw][packet_tos]} PREC=%{BASE16NUM:[ufw][packet_prec]} TTL=%{NUMBER:[ufw][packet_ttl]} ID=%{NUMBER:[ufw][packet_id]} (%{GREEDYDATA:[ufw][packet_df]} )?PROTO=%{NOTSPACE:[ufw][packet_proto]} SPT=%{NUMBER:[ufw][packet_src_port]} DPT=%{NUMBER:[ufw][packet_dst_port]} LEN=%{NUMBER:[ufw][packet_udp_len]}",
                                "^%{SYSLOGTIMESTAMP: timestamp} %{NOTSPACE:[ufw][host]} kernel: \[\s*%{NUMBER:[ufw][kernel_timestamp]}\] \[UFW %{NOTSPACE:[ufw][action]}?( %{NOTSPACE:[ufw][validity]})?\] IN=?(%{NOTSPACE:[ufw][adapter_in]})? OUT=?(%{NOTSPACE:[ufw][adapter_out]})? (MAC=(%{MAC:[ufw][dst_mac]}:%{MAC:[ufw][src_mac]}:%{BASE16NUM:[ufw][mac_appendix_one]}:%{BASE16NUM:[ufw][mac_appendix_two]})? )?SRC=%{IP:[ufw][src_ip]} DST=%{IP:[ufw][dst_ip]} LEN=%{NUMBER:[ufw][packet_len]} TOS=%{BASE16NUM:[ufw][packet_tos]} PREC=%{BASE16NUM:[ufw][packet_prec]} TTL=%{NUMBER:[ufw][packet_ttl]} ID=%{NUMBER:[ufw][packet_id]} (%{GREEDYDATA:[ufw][packet_df]} )?PROTO=%{NOTSPACE:[ufw][packet_proto]}",
                                "^%{SYSLOGTIMESTAMP: timestamp} %{NOTSPACE:[ufw][host]} kernel: \[\s*%{NUMBER:[ufw][kernel_timestamp]}\] \[UFW %{NOTSPACE:[ufw][action]}?( %{NOTSPACE:[ufw][validity]})?\] IN=?(%{NOTSPACE:[ufw][adapter_in]})? OUT=?(%{NOTSPACE:[ufw][adapter_out]})? (MAC=(%{MAC:[ufw][dst_mac]}:%{MAC:[ufw][src_mac]}:%{BASE16NUM:[ufw][mac_appendix_one]}:%{BASE16NUM:[ufw][mac_appendix_two]})? )?SRC=%{IP:[ufw][src_ip]} DST=%{IP:[ufw][dst_ip]} LEN=%{NUMBER:[ufw][len]} TC=%{NUMBER:[ufw][tc]} HOPLIMIT=%{NUMBER:[ufw][hop_limit]} FLOWLBL=%{NUMBER:[ufw][flow_lbl]} PROTO=%{NOTSPACE:[ufw][packet_proto]} TYPE=%{NUMBER:[ufw][type]} CODE=%{NUMBER:[ufw][code]}",
                                "^%{SYSLOGTIMESTAMP: timestamp} %{NOTSPACE:[ufw][host]} kernel: \[\s*%{NUMBER:[ufw][kernel_timestamp]}\] \[UFW %{NOTSPACE:[ufw][action]}?( %{NOTSPACE:[ufw][validity]})?\] IN=?(%{NOTSPACE:[ufw][adapter_in]})? OUT=?(%{NOTSPACE:[ufw][adapter_out]})? (MAC=(%{MAC:[ufw][dst_mac]}:%{MAC:[ufw][src_mac]}:%{BASE16NUM:[ufw][mac_appendix_one]}:%{BASE16NUM:[ufw][mac_appendix_two]})? )?SRC=%{IP:[ufw][src_ip]} DST=%{IP:[ufw][dst_ip]} %{GREEDYDATA:[ufw][packet_details]}"
                             ]
                 ]
      }
      if [ufw][packet_proto] == "2" {
        mutate {
          update => { "[ufw][packet_proto]" => "IGMP" }
        }
      }
      if [ufw][packet_proto] == "41" {
        mutate {
          update => { "[ufw][packet_proto]" => "IPv6" }
        }
      }
      geoip {
        default_database_type => 'City'
        database => '/usr/share/GeoIP/GeoLite2-City.mmdb'
        cache_size => 5000
        source => "[ufw][src_ip]"
        target => "[ufw][src_geoip]"
      }
      geoip {
        default_database_type => 'ASN'
        database => '/usr/share/GeoIP/GeoLite2-ASN.mmdb'
        cache_size => 5000
        source => "[ufw][src_ip]"
        target => "[ufw][src_geoasn]"
      }
      geoip {
        default_database_type => 'City'
        database => '/usr/share/GeoIP/GeoLite2-City.mmdb'
        cache_size => 5000
        source => "[ufw][dst_ip]"
        target => "[ufw][dst_geoip]"
      }
      geoip {
        default_database_type => 'ASN'
        database => '/usr/share/GeoIP/GeoLite2-ASN.mmdb'
        cache_size => 5000
        source => "[ufw][dst_ip]"
        target => "[ufw][dst_geoasn]"
      }
  }
}
