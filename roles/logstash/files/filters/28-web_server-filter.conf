filter {
  if [log_type] in ["nginx", "apache2"] {
    if [httpd][type] == "access" {
      grok {
        match => { "message" => ["%{IPORHOST:[httpd][access][remote_ip]} - %{DATA:[httpd][access][user_name]} \[%{HTTPDATE:[httpd][access][time]}\] \"?(%{WORD:[httpd][access][method]} )?%{DATA:[httpd][access][url]}?( HTTP/%{NUMBER:[httpd][access][http_version]})?\" %{NUMBER:[httpd][access][response_code]} %{NUMBER:[httpd][access][body_sent][bytes]} \"%{DATA:[httpd][access][referrer]}\" \"%{DATA:[httpd][access][agent]}\"( \\?\"%{DATA:[httpd][access][forwarded_for]}\\?\")?( %{GREEDYDATA:[httpd][access][message]})?"] }
        remove_field => "message"
      }
      kv {
        source => "[httpd][access][message]"
        target => "[httpd][access][connection]"
        remove_field => "[httpd][access][message]"
      }
      grok { 
        match => {
          "[httpd][access][url]" => [ "%{URIPATH:[httpd][access][url_path]}%{URIPARAM:[httpd][access][url_params_temp]}?" ]
        }
        tag_on_failure => ["_url_path_params_split_failure"]
      }
      urldecode { 
        field => "[httpd][access][url_path]" 
        tag_on_failure => ["_url_path_urldecode_parse_failure"]
      }
      if [httpd][access][url_params_temp] {
        mutate { 
          gsub =>  ["[httpd][access][url_params_temp]","\?","" ] 
        }
        if [httpd][access][url_params_temp] != "" {
          kv {
            field_split => "&"
            source => "[httpd][access][url_params_temp]"
            target => "[httpd][access][url_params]"
            remove_field =>  ["[httpd][access][url_params_temp]"] 
            tag_on_failure => "_url_params_kv_parse_failure"
            exclude_keys => ["stub_value_123"]
          }
        }
        if ![httpd][access][url_params] {
          mutate {
            add_field => { "[httpd][access][url_params_temp]" => "stub_value_123=true"  }
          }
          kv {
            field_split => "&"
            source => "[httpd][access][url_params_temp]"
            target => "[httpd][access][url_params]"
            remove_field =>  ["[httpd][access][url_params_temp]"] 
            tag_on_failure => "_url_params_kv_parse_failure"
          }
        }
        urldecode { 
          field => "[httpd][access][url_params]" 
          tag_on_failure => ["_url_params_urldecode_parse_failure"]
        }
      }
      if [httpd][access][url_params_temp] {
        mutate {
          remove_field => "[httpd][access][url_params_temp]"
          add_tag => ["_url_params_parse_failure"]
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/occurrence.*\/.*/ {
        if [httpd][access][url_path] =~ /\/ws\/occurrence.*\/search.*/ {
        } else {
          grok {
            match => { "[httpd][access][url_path]" => ["/ws\/occurrence.*\/%{GREEDYDATA:[httpd][access][url_params][occurrence_guid]}"] }      
          }
          mutate {
            update => { "[httpd][access][url_path]" => "/ws/occurrence" }
          }
        }
      }
      if [httpd][access][url_path] =~ /\/occurrence.*\/.*/ {
        if [httpd][access][url_path] =~ /\/occurrence.*\/search.*/ {
        } else {
          grok {
            match => { "[httpd][access][url_path]" => ["\/occurrence.*\/%{GREEDYDATA:[httpd][access][url_params][occurrence_guid]}"] }      
          }
          mutate {
            update => { "[httpd][access][url_path]" => "/occurrences" }
          }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/webportal\/params\/details\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/webportal\/params\/details\/%{GREEDYDATA:[httpd][access][url_params][qid]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/qid" }
        }
      }
      if [httpd][access][url_path] =~ /\/i18n\/Messages.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/i18n\/Messages(?:_)(%{NOTSPACE:[httpd][access][url_params][i18n_code]})?.properties"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/i18n/Messages" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/qid\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/qid\/%{GREEDYDATA:[httpd][access][url_params][qid]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/qid" }
        }
      }
      if [httpd][access][url_path] =~ /\/speciesListItem\/list\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/speciesListItem\/list\/%{GREEDYDATA:[httpd][access][url_params][species_list_id]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/speciesListItem/list" }
        }
      }
      if [httpd][access][url_path] =~ /\/speciesList\/fieldGuide\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/speciesList\/fieldGuide\/%{GREEDYDATA:[httpd][access][url_params][species_list_id]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/speciesList/fieldGuide" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/speciesListItems\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/speciesListItems\/%{GREEDYDATA:[httpd][access][url_params][species_list_id]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/speciesListItems/" }
        }
      }
      else if [httpd][access][url_path] =~ /\/ws\/speciesList\/.+/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/speciesList\/%{GREEDYDATA:[httpd][access][url_params][species_list_id]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/speciesList/" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/webportal\/wms\/reflect.*/ {
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/mapping/wms/reflect" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/ogc\/wms\/reflect.*/ {
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/mapping/wms/reflect" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/webportal\/wms\/image.*/ {
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/mapping/wms/image" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/ogc\/wms\/image.*/ {
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/mapping/wms/image" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/updateMetadata\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/updateMetadata\/%{GREEDYDATA:[httpd][access][url_params][imageId]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/updateMetadata" }
        }
      }
      if [httpd][access][url_path] =~ /\/image\/details\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/image\/details\/%{GREEDYDATA:[httpd][access][url_params][imageId]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/image/details" }
        }
      }
      if [httpd][access][url_path] =~ /\/image\/proxyImage\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/image\/proxyImage\/%{GREEDYDATA:[httpd][access][url_params][imageId]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/image/proxyImage" }
        }
      }
      if [httpd][access][url_path] =~ /\/image\/tagsFragment\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/image\/tagsFragment\/%{GREEDYDATA:[httpd][access][url_params][imageId]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/image/tagsFragment" }
        }
      }
      if [httpd][access][url_path] =~ /\/image\/view\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/image\/view\/%{GREEDYDATA:[httpd][access][url_params][imageId]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/image/view" }
        }
      }
      if [httpd][access][url_path] =~ /\/store\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/store\/%{BASE16NUM}\/%{BASE16NUM}\/%{BASE16NUM}\/%{BASE16NUM}\/%{UUID:[httpd][access][url_params][imageId]}\/%{NOTSPACE:[httpd][access][url_params][image_type]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/store" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/getImageInfo\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/getImageInfo\/%{UUID:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/getImageInfo" }
        }
      }
      if [httpd][access][url_path] =~ /\/user\/taskListFragment\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/user\/taskListFragment\/%{NUMBER:[httpd][access][url_params][userId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/user/taskListFragment" }
        }
      }
      if [httpd][access][url_path] =~ /\/user\/show\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/user\/show\/%{NUMBER:[httpd][access][url_params][userId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/user/show" }
        }
      }
      if [httpd][access][url_path] =~ /\/user\/ajaxGetPoints\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/user\/ajaxGetPoints\/%{NUMBER:[httpd][access][url_params][userId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/user/ajaxGetPoints" }
        }
      }
      if [httpd][access][url_path] =~ /\/task\/showDetails\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/task\/showDetails\/%{NUMBER:[httpd][access][url_params][taskId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/task/showDetails" }
        }
      }
      if [httpd][access][url_path] =~ /\/task\/showImage\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/task\/showImage\/%{NUMBER:[httpd][access][url_params][taskId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/task/showImage" }
        }
      }
      if [httpd][access][url_path] =~ /\/transcribe\/task\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/transcribe\/task\/%{NUMBER:[httpd][access][url_params][taskId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/transcribe/task" }
        }
      }
      if [httpd][access][url_path] =~ /\/transcribe\/showNextAction\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/transcribe\/showNextAction\/%{NUMBER:[httpd][access][url_params][taskId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/transcribe/showNextAction" }
        }
      }
      if [httpd][access][url_path] =~ /\/validate\/task\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/validate\/task\/%{NUMBER:[httpd][access][url_params][taskId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/validate/task" }
        }
      }
      if [httpd][access][url_path] =~ /\/transcribe\/showNextFromProject\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/transcribe\/showNextFromProject\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/transcribe/showNextFromProject" }
        }
      }
      if [httpd][access][url_path] =~ /\/transcribe\/index\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/transcribe\/index\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/transcribe/index" }
        }
      }
      if [httpd][access][url_path] =~ /\/task\/projectAdmin\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/task\/projectAdmin\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/task/projectAdmin" }
        }
      }
      if [httpd][access][url_path] =~ /\/project\/index\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/project\/index\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/project/index" }
        }
      }
      if [httpd][access][url_path] =~ /\/project\/tasksToMap\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/project\/tasksToMap\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/project/tasksToMap" }
        }
      }
      if [httpd][access][url_path] =~ /\/project\/show\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/project\/show\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/project/show" }
        }
      }
      if [httpd][access][url_path] =~ /\/project\/exportCSV\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/project\/exportCSV\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/project/exportCSV" }
        }
      }
      if [httpd][access][url_path] =~ /\/project\/archive\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/project\/archive\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/project/archive" }
        }
      }
      if [httpd][access][url_path] =~ /\/project\/projectSize\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/project\/projectSize\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/project/projectSize" }
        }
      }
      if [httpd][access][url_path] =~ /\/project\/downloadImageArchive\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/project\/downloadImageArchive\/%{NUMBER:[httpd][access][url_params][projectId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/project/downloadImageArchive" }
        }
      }
      if [httpd][access][url_path] =~ /\/data\/volunteer\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/data\/volunteer\/%{NUMBER:[httpd][access][url_params][projectId]}/%{NUMBER:[httpd][access][url_params][taskId]}\/%{NUMBER:[httpd][access][url_params][multimediaId]}\/%{GREEDYDATA:[httpd][access][url_params][filename]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/data/volunteer" }
        }
      }
      if [httpd][access][url_path] =~ /\/image\/.*\/.*\/.*\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/image\/%{DATA:[httpd][access][url_params][prefix]}\/%{NUMBER:[httpd][access][url_params][width]}\/%{NUMBER:[httpd][access][url_params][height]}\/%{BASE16NUM:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/image" }
        }
      }
      if [httpd][access][url_path] =~ /\/institution\/index\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/institution\/index\/%{NUMBER:[httpd][access][url_params][institutionId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/institution/index" }
        }
      }
      if [httpd][access][url_path] =~ /\/forum\/viewForumTopic\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/forum\/viewForumTopic\/%{NUMBER:[httpd][access][url_params][forumTopicId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/forum/viewForumTopic" }
        }
      }
      if [httpd][access][url_path] =~ /\/forum\/userComments\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/forum\/userComments\/%{NUMBER:[httpd][access][url_params][forumId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/forum/userComments" }
        }
      }
      if [httpd][access][url_path] =~ /\/forum\/redirectTopicParent\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/forum\/redirectTopicParent\/%{NUMBER:[httpd][access][url_params][forumId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/forum/redirectTopicParent" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/image\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/image\/%{UUID:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/image" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/scheduleArtifactGeneration\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/scheduleArtifactGeneration\/%{UUID:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/scheduleArtifactGeneration" }
        }
      }
      if [httpd][access][url_path] =~ /\/image\/imageAuditTrailFragment\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/image\/imageAuditTrailFragment\/%{GREEDYDATA:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/image/imageAuditTrailFragment" }
        }
      }
      if [httpd][access][url_path] =~ /\/image\/imageMetadataTableFragment\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/image\/imageMetadataTableFragment\/%{GREEDYDATA:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/image/imageMetadataTableFragment" }
        }
      }
      if [httpd][access][url_path] =~ /\/image\/imageTooltipFragment\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/image\/imageTooltipFragment\/%{GREEDYDATA:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/image/imageTooltipFragment" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/attachTagToImage\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/attachTagToImage\/%{UUID:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/attachTagToImage" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/deleteImage\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/deleteImage\/%{UUID:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/deleteImage" }
        }
      }
      if [httpd][access][url_path] =~ /\/selection\/ajaxSelectImage\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/selection\/ajaxSelectImage\/%{GREEDYDATA:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/selection/ajaxSelectImage" }
        }
      }
# FIXME: The following breaks on `/assets/test/something.png?` and similar with:
# [logstash.filters.grok    ][main][656071e326db26f6ee735357def43439374f7fec12c5a75f00c293d76e16852f] Grok regexp threw exception {:exception=>"Could not set field 'asset_name' on object '' to value 'test/something'.This is probably due to trying to set a field like [foo][bar] = someValuewhen [foo] is not either a map or a string", :backtrace=>["org.logstash.Accessors.setChild(Accessors.java:142)", "org.logstash.Accessors.set(Accessors.java:36)", "org.logstash.Event.setField(Event.java:208)", "org.logstash.ext.JrubyEventExtLibrary$RubyEvent.ruby_set_field(JrubyEventExtLibrary.java:121)", "usr.share.logstash.vendor.bundle.jruby.$2_dot_5_dot_0.gems.logstash_minus_filter_minus_grok_minus_4_dot_3_dot_0.lib.logstash.filters.grok.RUBY$method$handle$0(/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-filter-grok-4.3.0/lib/logstash/filters/grok.rb:414)", "org.jruby.internal.runtime.methods.CompiledIRMethod.call(CompiledIRMethod.java:134)", "org.jruby.internal.runtime.methods.MixedModeIRMethod.call(MixedModeIRMethod.java:210)", "org.jruby.ir.targets.InvokeSite.fail(InvokeSite.java:324)", "usr.share.logstash.vendor.bundle.jruby.$2_dot_5_dot_0.gems.logstash_minus_filter_minus_grok_minus_4_dot_3_dot_0.lib.logstash.filters.grok.RUBY$block$match$2(/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-filter-grok-4.3.0/lib/logstash/filters/grok.rb:372)", "org.j
#      if [httpd][access][url_path] =~ /\/assets\/.*/ {
#        grok {
#          match => { "[httpd][access][url_path]" => [
#                                                        "\/assets\/%{NOTSPACE:[httpd][access][url_params][asset_name]}-%{BASE16NUM:[httpd][access][url_params][asset_id]}(?:\.)(%{NOTSPACE:[httpd][access][url_params][response_format]})?",
#                                                        "\/assets\/%{NOTSPACE:[httpd][access][url_params][asset_name]}(?:\.)(%{NOTSPACE:[httpd][access][url_params][response_format]})?"
#                                                    ]
#             }
#        }
#        mutate {
#          update => { "[httpd][access][url_path]" => "/assets" }
#        }
#      }
      if [httpd][access][url_path] =~ /\/ws\/taxon\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/taxon\/%{GREEDYDATA:[httpd][access][url_params][species_lsid]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/taxon" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/childConcepts\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/childConcepts\/%{GREEDYDATA:[httpd][access][url_params][species_lsid]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/childConcepts" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/classification\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/classification\/%{GREEDYDATA:[httpd][access][url_params][species_lsid]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/classification" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/species\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/species\/%{GREEDYDATA:[httpd][access][url_params][species_lsid]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/species" }
        }
      }
      else if [httpd][access][url_path] =~ /\/species\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/species\/%{GREEDYDATA:[httpd][access][url_params][species_lsid]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/species" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/detachTagFromImage\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/detachTagFromImage\/%{UUID:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/detachTagFromImage" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/getSubimageRectangles\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/getSubimageRectangles\/%{UUID:[httpd][access][url_params][imageId]}?(.%{NOTSPACE:[httpd][access][url_params][response_format]})?"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/getSubimageRectangles" }
        }
      }
      if [httpd][access][url_path] =~ /\/assertions\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/assertions\/%{GREEDYDATA:[httpd][access][url_params][assertion_id]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/assertions" }
        }
      }
      if [httpd][access][url_path] =~ /\/api\/doi\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/api\/doi\/%{GREEDYDATA:[httpd][access][url_params][doi_guid]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/api/doi" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/explore\/endemic\/speciescount\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/explore\/endemic\/speciescount\/%{GREEDYDATA:[httpd][access][url_params][qid]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/explore/endemic/speciescount" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/explore\/endemic\/species\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/explore\/endemic\/species\/%{GREEDYDATA:[httpd][access][url_params][qid]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/explore/endemic/species" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/explore\/group\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/explore\/group\/%{GREEDYDATA:[httpd][access][url_params][group]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/explore/group" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/duplicates\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/duplicates\/%{GREEDYDATA:[httpd][access][url_params][occurrence_id]}"] }      
        }
        mutate{
          update => { "[httpd][access][url_path]" => "/ws/duplicates" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/outlier\/record\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/outlier\/record\/%{GREEDYDATA:[httpd][access][url_params][occurrence_id]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/outlier/record" }
        }
      }
      if [httpd][access][url_path] =~ /\/ws\/facets\/i18n.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/ws\/facets\/%{GREEDYDATA:[httpd][access][url_params][i18n]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/ws/facets/i18n" }
        }
      }
      if [httpd][access][url_path] =~ /\/biocache-download\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/biocache-download\/%{GREEDYDATA:[httpd][access][url_params][biocache_non_doi_download]}"] }      
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/biocache-download" }
        }
      }
      if [httpd][access][url_path] =~ /\/content\/repositories\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/content\/repositories\/%{WORD:[httpd][access][url_params][nexus_repository]}\/%{GREEDYDATA:[httpd][access][url_params][nexus_coordinate]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/content/repositories" }
        }
      }
      if [httpd][access][url_path] =~ /\/content\/groups\/.*/ {
        grok {
          match => { "[httpd][access][url_path]" => ["\/content\/groups\/%{WORD:[httpd][access][url_params][nexus_repository]}\/%{GREEDYDATA:[httpd][access][url_params][nexus_coordinate]}"] }
        }
        mutate {
          update => { "[httpd][access][url_path]" => "/content/groups" }
        }
      }
      if [httpd][access][url_path] =~ /\/doi\/.*/ {
        if [httpd][access][url_path] =~ /\/doi.*\/.*\/download/ {
          grok {
            match => { "[httpd][access][url_path]" => ["\/doi\/%{GREEDYDATA:[httpd][access][url_params][doi_guid]}\/download"] }      
          }
          mutate {
            update => { "[httpd][access][url_path]" => "/doi/{doi_guid}/download" }
          }
        } else {
          grok {
            match => { "[httpd][access][url_path]" => ["\/doi\/%{GREEDYDATA:[httpd][access][url_params][doi_guid]}"] }      
          }
          mutate {
            update => { "[httpd][access][url_path]" => "/doi" }
          }
        }
      }
      mutate {
        add_field => { "read_timestamp" => "%{@timestamp}" }
      }
      date {
        match => [ "[httpd][access][time]", "dd/MMM/YYYY:H:m:s Z" ]
        remove_field => "[httpd][access][time]"
      }
      useragent {
        source => "[httpd][access][agent]"
        target => "[httpd][access][user_agent]"
      }
      geoip {
        default_database_type => 'City'
        database => '/usr/share/GeoIP/GeoLite2-City.mmdb'
        cache_size => 5000
        source => "[httpd][access][remote_ip]"
        target => "[httpd][access][geoip]"
      }
      geoip {
        default_database_type => 'ASN'
        database => '/usr/share/GeoIP/GeoLite2-ASN.mmdb'
        cache_size => 5000
        source => "[httpd][access][remote_ip]"
        target => "[httpd][access][geoasn]"
      }
       mutate {
        copy => { "[httpd][access][url_params][q.op]" => "[httpd][access][url_params][q_op]" }
        remove_field =>  ["[httpd][access][url_params][q.op]"] 
      }
      if [httpd][access][connection][request_time] =~ "-" {
        grok {
          match => { "[httpd][access][connection][request_time]" => ["\-"] }
          remove_field => "[httpd][access][connection][request_time]"
        }
      }
      if [httpd][access][connection][upstream_connect_time] =~ "-" {
        grok {
          match => { "[httpd][access][connection][upstream_connect_time]" => ["\-"] }
          remove_field => "[httpd][access][connection][upstream_connect_time]"
        }
      }
      if [httpd][access][connection][upstream_header_time] =~ "-" {
        grok {
          match => { "[httpd][access][connection][upstream_header_time]" => ["\-"] }
          remove_field => "[httpd][access][connection][upstream_header_time]"
        }
      }
      if [httpd][access][connection][upstream_response_time] =~ "-" {
        grok {
          match => { "[httpd][access][connection][upstream_response_time]" => ["\-"] }
          remove_field => "[httpd][access][connection][upstream_response_time]"
        }
      }
    }
    else if [httpd][type] == "error" {
      grok {
        match => { "message" => ["%{DATA:[httpd][error][time]} \[%{DATA:[httpd][error][level]}\] %{NUMBER:[httpd][error][pid]}#%{NUMBER:[httpd][error][tid]}: (\*%{NUMBER:[httpd][error][connection_id]} )?%{GREEDYDATA:[httpd][error][message]}"] }
        remove_field => "message"
      }
      grok{
        match => {"[httpd][error][message]" => [
                                                "(%{DATA:[httpd][error][object][reason]})((, client: )%{DATA:[httpd][error][object][client]})((, server: )%{DATA:[httpd][error][object][server]})((, request: \")%{DATA:[httpd][error][object][request_text]}\")((, upstream: \")%{DATA:[httpd][error][object][upstream]}\")?((, host: \")%{DATA:[httpd][error][object][host]}\")?((, referrer: \")%{DATA:[httpd][error][object][referrer]}\")?",
                                                "%{DATA:[httpd][error][object][reason]} to resolve %{IPORHOST:[httpd][error][ocsp][host]} while requesting certificate status, responder: %{IPORHOST:[httpd][error][ocsp][responder]}(, certificate: \"%{DATA:[httpd][error][ocsp][cert_location]}\")?"
                                               ]
        }
      }
      grok{
        match => {"[httpd][error][object][request_text]" => ["%{WORD:[httpd][error][object][request][method]} %{DATA:[httpd][error][object][request][url]} HTTP/%{NUMBER:[httpd][error][object][request][http_version]}"]}
        remove_field => "[httpd][error][object][request_text]"
      }
    kv {
        source => "[httpd][error][object][request][url]"
        field_split => "&?"
        target => "[httpd][error][object][request][url_params]"
    }
      mutate {
        add_field => { "read_timestamp" => "%{@timestamp}" }
      }
      date {
        match => [ "[httpd][error][time]", "YYYY/MM/dd H:m:s" ]
        remove_field => "[httpd][error][time]"
      }
      if [httpd][error][object][client] {
        geoip {
          default_database_type => 'City'
          database => '/usr/share/GeoIP/GeoLite2-City.mmdb'
          cache_size => 5000
          source => "[httpd][error][object][client]"
          target => "[httpd][error][object][geoip]"
        }
        geoip {
          default_database_type => 'ASN'
          database => '/usr/share/GeoIP/GeoLite2-ASN.mmdb'
          cache_size => 5000
          source => "[httpd][error][object][client]"
          target => "[httpd][error][object][geoasn]"
        }
      }
      if [httpd][error][object][reason] =~ /limiting requests, .*/ {
        grok {
          match => { "[httpd][error][object][reason]" => ["%{WORD:[httpd][error][object][limit_type]} requests, excess: %{NUMBER:[httpd][error][object][limit_time]} by zone \"%{NOTSPACE:[httpd][error][object][limit_zone]}\""] }
        }
      }
      if [httpd][error][object][reason] =~ /delaying request, .*/ {
        grok {
          match => { "[httpd][error][object][reason]" => ["%{WORD:[httpd][error][object][limit_type]} request, excess: %{NUMBER:[httpd][error][object][limit_time]}, by zone \"%{NOTSPACE:[httpd][error][object][limit_zone]}\""] }
        }
      }
    }
  }
}
